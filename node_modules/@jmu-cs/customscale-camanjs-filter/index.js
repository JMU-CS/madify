Caman.Filter.register("customscale", function (luminance, black, white, scalingFunction) {
  const MAX_COLOR = 255.0
  const JMU_PURPLE = {
    r: 69,
    g: 0,
    b: 132
  }
  const JMU_GOLD = {
    r: 203,
    g: 182,
    b: 119
  }
  var _black, _white, _scalingFunction
  _black = black
  if (!_black) {
    _black = JMU_PURPLE
  }
  _white = white
  if (!_white) {
    _white = JMU_GOLD
  }
  _scalingFunction = scalingFunction
  if (!_scalingFunction) {
    _scalingFunction = function (percentDistance) {
      return percentDistance
    }
  }
  const COLOR_DISTANCE = {
    r: _white.r - _black.r,
    g: _white.g - _black.g,
    b: _white.b - _black.b
  }

  this.process("customscale", function (rgba) {
    if (luminance) {
      // luminance-based grayscale
      rgba.r *= 0.299
      rgba.g *= 0.587
      rgba.b *= 0.114
    } else {
      // avg grayscale
      let avg = (rgba.r + rgba.g + rgba.b) / 3
      rgba.r = avg
      rgba.g = avg
      rgba.b = avg
    }

    const percent = {
      r: rgba.r / MAX_COLOR,
      g: rgba.g / MAX_COLOR,
      b: rgba.b / MAX_COLOR
    }

    rgba.r = _black.r + _scalingFunction(percent.r) * COLOR_DISTANCE.r
    rgba.g = _black.g + _scalingFunction(percent.g) * COLOR_DISTANCE.g
    rgba.b = _black.b + _scalingFunction(percent.b) * COLOR_DISTANCE.b
  })
  return this
})
